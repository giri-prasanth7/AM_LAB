	ASK : 13 -71
  FSK : 74 - 127
  PSK : 137 - 174
  QPSK : 199 - 281
  PCM : 290 - 373
  DELTA : 380 - 453
  
  
  
  
  
  ASK :
clc
clear all
close all

%To generate a sine wave of amplitude 1
fs1= 1000;  % sampling frequency of 1st signal
f1= 10;  % message frequency of 1st signal
nCyl=5;  
t1=0:1/fs1:nCyl*1/f1;  %To generate a time period
x1=sin(2*pi*f1*t1);  % To create a sine wave
figure(1)
subplot(3,1,1) % sub plot it in 1st column
plot(t1,x1) %To plot the sine wave

%To generate a sine wave of amplitude 2
x2=2*sin(2*pi*f1*t1); % sine wave generation
subplot(3,1,2)
plot(t1,x2) %To plot the sine wave

bin_data=randi([0,1],1,100)%To generate a array size 

%To create a for loop to merge two individual sine wave
op=[];
for i =1:100
    if bin_data(i)==1
        op=[op x2];
    else
        op=[op x1];
    end
end

a=length(op) %To find the size of merged array
subplot(3,1,3)
plot(op)

b=awgn(op,5); %To add white gaussian noise to op
figure(2)
plot(b)

%modulation part is over
%start with demodulation part

max(xcorr(x1,x1)) %finding the max autocorrelation of x1
max(xcorr(x2,x2)) %finding the max autocorrelation of x2
max(xcorr(x1,x2)) %finding the max crosscorrelation of x1,x2
figure(3)
dem=[]
%To demodulate the wave
for i=1:99
    k=op(((i*length(x2))+1):((i+1)*length(x1)));
    a=max(xcorr(k,x2))
    if a>(max(xcorr(x2,x1)))
        dem=[dem,1];
    else
        dem=[dem,0];
    end
end
stem(dem)
title("Demodulated output signal 21BEC1715")
	
FSK :
clc
clear all 
close all

fm=10;
fc=100;
fs=500;
nCyl=5;  
t1=0:1/fc:nCyl*1/fm;


f1=fc-fm;
f2=fc+fm;

A=2;

w1=A*sin(2*pi*f1*t1);
w2=A*sin(2*pi*f2*t1);

figure(1)
subplot(311);
plot(t1,w1);

subplot(312);
plot(t1,w2);


bin_data=randi([0,1],1,100)%To generate a array size 

%To create a for loop to merge two individual sine wave
op=[];
for i =1:100
    if bin_data(i)==1
        op=[op w2];
    else
        op=[op w1];
    end
end

a=length(op)
subplot(3,1,3)
plot(op)

b=awgn(op,5);
figure(2)
plot(b)

figure(3)

N_fft=1024;
x1=fft(op,N_fft);
X = fftshift(fft(op,N_fft));
ind_fft= 0: N_fft-1;
plot(ind_fft,abs(X));

%modulation part is over






PSK:
clc
clear all
close all

%To generate a sine wave of amplitude 1
fs1= 1000;  % sampling frequency of 1st signal
f1= 10;  % message frequency of 1st signal
nCyl=5;  
t1=0:1/fs1:nCyl*1/f1;  %To generate a time period
x1=sin(2*pi*f1*t1);  % To create a sine wave
figure(1)
subplot(3,1,1) % sub plot it in 1st column
plot(t1,x1) %To plot the sine wave

%To generate a sine wave of amplitude 2
x2=(-1)*sin(2*pi*f1*t1); % sine wave generation
subplot(3,1,2)
plot(t1,x2) %To plot the sine wave

bin_data=randi([0,1],1,100)%To generate a array size 

%To create a for loop to merge two individual sine wave
op=[];
for i =1:100
    if bin_data(i)==1
        op=[op x2];
    else
        op=[op x1];
    end
end

a=length(op)
subplot(3,1,3)
plot(op)

b=awgn(op,5);
figure(2)
plot(b)

%modulation part is over




















QPSK :

clc
clear all
close all
fs=1000; 
num_cyc=10;
fm=5; 
t=0:1/fs:num_cyc/fm;
A=5; 
N=8;
m=rand(1,N);
for i=1:N
 if m(i)>0.5
 m(i)=1;
  else
 m(i)=0;
 end
end
m
figure(1)
s= A*sin(2*pi*fm*t);
subplot(211)
plot(s)

c = A*cos(2*pi*fm*t);
subplot(212)
plot(c)

m1 = s + c;
m2 = s - c;
m3 = -s + c;
m4 = -s - c;
y=[];
for (i=1:2:length(m)-1)
 if m(i)==0 && m(i+1)==1
 y=[y m1];
 elseif m(i)==1 && m(i+1)==0
 y=[y m2];
 elseif m(i)==1 && m(i+1)==1
 y=[y m3];
 elseif m(i)==0 && m(i+1)==0
 y=[y m4];
 end
end
figure(2)
plot(y) 
title("QPSK signal")
snr = 0.1;
y1=awgn(y,snr); 
figure(3)
plot(y1)
title("QPSK signal with noise")
demod=[];
for n=0:2:N-1
 k=y(((n*((length(m4))/2))+1):((n+2)*((length(m4))/2)));
 a=max(xcorr(k,m1));
 b=max(xcorr(k,m2));
 c=max(xcorr(k,m3));
 d=max(xcorr(k,m4));
 if a>b && a>c && a>d
 demod=[demod,0];
 demod=[demod,1];
 elseif b>a && b>c && b>d
 demod=[demod,1];
 demod=[demod,0];
 elseif c>a && c>b && c>d
 demod=[demod,1];
 demod=[demod,1];
 elseif d>a && d>b && d>c
 demod=[demod,0];
 demod=[demod,0];
 end
end
demod 
figure(4)
stem(demod)
error = 0;
for i = 1:numel(demod)
    if demod(i) ~= m(i)
        error = error + 1;
    end
end

fprintf('Number of unequal elements: %d\n', error);







PCM:
clc
clear all
close all
%Getting the required inputs
n=input('Number of samples:'); 
t=0:(2*pi/n):4*pi; %Determining the time period
t1=0:0.01:4*pi;

xmax=input('Amplitude of the Signal:'); %getting amplitude of the signal
msg1=xmax*sin(t); %creating a sine wave with that amplitude
y=xmax*sin(t);
figure(1)
subplot(2,1,1)
plot(t,y)    %plotting the message signal
xlim([0 4*pi])
xlabel('Amplitude(in V)')
title('Message Signal(in seconds)-21BEC1715')

subplot(2,1,2)
stem(t,msg1)  %sampling the message signal
xlim([0 4*pi]) %determining the x-axis limit
xlabel('Time(in seconds)')
ylabel('Amplitude(in V)')
title('Sampled Signal - 21BEC1715')

m=input('Number of bits:'); 
L=2^m;
xmin=-xmax; %determining the minimum amplitude

del=(xmax-xmin)/L;
dec_lvl=xmin:del:xmax;
rep_lvl=xmin-(del/2):del:xmax+(del/2);
[ind,qua]=quantiz(msg1,dec_lvl,rep_lvl); %quantization of the message signal

figure(2)
subplot(2,1,1)
stem(qua) %stem(t,quantiz(msg1,dec_lvl,rep_lvl));
xlabel('Time')
ylabel('Amplitude(in V)')
title('Sampled Signal')

l1=length(ind);
for i=1:l1
    if ind(i)~=0
        ind(i)=ind(i)-1;
    end
end

conv=de2bi(ind,'left-msb'); %converting decimal to binary
k=1;
for i=1:l1
    for j=1:m
        conv(k)=conv(i,j)
        j=j+1;
        k=k+1;
    end
    i=i+1;
end

figure(3)
subplot(4,1,1)
stem(qua) %stem(t,quantiz(msg1,dec_lvl,rep_lvl));
xlabel('Time')
ylabel('Amplitude(in V)')
title('Quantized Signal(in seconds) - 21BEC1715')

subplot(4,1,2)
stem(t,msg1)
xlabel('Time')
ylabel('Amplitude(in V)')
title('Sampled Signal - 21BEC1715')

subplot(4,1,3)
plot(t,y)
xlim([0 4*pi])
xlabel('Time')
ylabel('Amplitude(in V)')
title('Message Signal (in seconds) - 21BEC1715')

subplot(4,1,4)
stairs(conv)
xlabel('Time')
ylabel('Amplitude(in V)')
title('Sampled Signal - 21BEC1715')




DELTA :

clc
clear all
close all

%reading input signal parameters
am=input('enter the maximum amplitude:')
fm=input('enter the maximum frequency component:')
fs=20*fm;
t=0:(1/fs):(2/fm);
x=am*cos(2*pi*fm*t);

%defining empty arrays
xs=0; %empty array to store staircase
y=0; %empty array to store output
del=2*pi*am*fm*(1/fs); %defining step size

%filling the array with modulated signal
for i=1:length(x)
    if xs(i)<=x(i)
        xs(i+1)=xs(i)+del;
        b=1;
    else
        xs(i+1)=xs(i)-del;
        b=0;
    end
    y=[y,b];
end

figure("Name","DM without S0 distortion")
plot(x,'color','b','LineWidth',1)
title('DM (no slope overload distortion)')
xlabel('Time')
ylabel('amplitude')
hold on
stairs(xs,'color','r','LineWidth',1)
hold off
grid on

%plot delta modulated signal
figure("Name","Delta modulated signal")
stairs(y,'color','m','LineWidth',1)
title('delta modulated signal')
xlabel('Time')
ylabel('Amplitude')
grid on

%applying slope overload distortion
del1=4*pi*am*fm*(1/fs);
%defining empty arrays
xs1=0; %empty array to store staircase

y1=0; %empty array to store output

%filling the array with modulated signal
for i=1:length(x)
    if xs1(i)<=x(i)
        xs1(i+1)=xs1(i)+del1; %increment if amplitude is less
        b1=1;
    else
        xs1(i+1)=xs1(i)-del1;
        b1=0;
    end
    y1=[y1,b1];
end

figure("Name","DM with S0 distortion")
plot(x,'color','b','LineWidth',1)
title("DM (slope overload distortion)")
xlabel("Time")
ylabel("Amplitude")
hold on
stairs(xs1,'color','r','LineWidth',1)
hold off
grid on
